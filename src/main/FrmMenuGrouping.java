/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.FocusTraversalPolicy;
import java.awt.KeyboardFocusManager;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author faheem
 */
public class FrmMenuGrouping extends javax.swing.JInternalFrame {
    private Connection conn;
    private List lstGroupId=new ArrayList();
    MyKeyListener kListener = new MyKeyListener();
    GeneralFunction fn=new GeneralFunction();
    private Component aThis;
    /**
     * Creates new form FrmMenuGrouping
     */
    public FrmMenuGrouping() {
        initComponents();
        fn.addKeyListenerInContainer(jPanel1, kListener, txtFocusListener);
        jTable1.addKeyListener(kListener);
        btnSave.addKeyListener(kListener);
        btnCancel.addKeyListener(kListener);
        
    }

    public void setConn(Connection c){
        this.conn=c;
    }
    
    private void udfInitForm(){
        loadGroup("");
        aThis=this;
    }
    
    private void loadGroup(String s){
        try{
            ResultSet rs=conn.createStatement().executeQuery("select * from m_menu_group "
                    + "where module_name='APOTEK' ");
            cmbGroup.removeAllItems();
            cmbGroup.addItem("<Tambah Grup>");
            lstGroupId.add("");
            while(rs.next()){
                lstGroupId.add(rs.getString("group_id"));
                cmbGroup.addItem(rs.getString("group_id"));
            }
            rs.close();
            if(cmbGroup.getItemCount()> 1){
                cmbGroup.setSelectedIndex(1);
            }
        }catch(SQLException se){
            JOptionPane.showMessageDialog(this, se.getMessage());
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbGroup = new javax.swing.JComboBox();
        txtKeterangan = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setClosable(true);
        setTitle("Grouping Menu");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        jPanel1.setLayout(null);

        jLabel1.setText("Keterangan : ");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(10, 45, 95, 20);

        jLabel2.setText("Group : ");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(10, 15, 100, 20);

        cmbGroup.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbGroup.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbGroupItemStateChanged(evt);
            }
        });
        cmbGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbGroupActionPerformed(evt);
            }
        });
        jPanel1.add(cmbGroup);
        cmbGroup.setBounds(115, 15, 295, 25);
        jPanel1.add(txtKeterangan);
        txtKeterangan.setBounds(115, 45, 340, 25);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(12, 12, 465, 80);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Keterangan Menu", "ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 95, 465, 215);

        btnSave.setText("Simpan");
        btnSave.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        getContentPane().add(btnSave);
        btnSave.setBounds(277, 320, 105, 31);

        btnCancel.setText("Batal");
        btnCancel.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        getContentPane().add(btnCancel);
        btnCancel.setBounds(385, 320, 85, 31);

        setBounds(0, 0, 493, 386);
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        udfInitForm();
    }//GEN-LAST:event_formInternalFrameOpened

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        udfSave();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void cmbGroupItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbGroupItemStateChanged
        
    }//GEN-LAST:event_cmbGroupItemStateChanged

    private void cmbGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbGroupActionPerformed
        if(lstGroupId.size()==1  ||(cmbGroup.getSelectedIndex()==0 && this.isShowing())){
            String newGroup=JOptionPane.showInputDialog(this, "Grup menu baru :");
            if(newGroup!=null && newGroup.length()>0 && addGroup(newGroup)){
                //return;
            
                cmbGroup.addItem(newGroup);
                lstGroupId.add(newGroup);
                cmbGroup.setSelectedIndex(cmbGroup.getItemCount()-1);
            }
        }else if(conn!=null  && cmbGroup.getSelectedIndex()>0) {
            udfLoadMenuList();
        }
    }//GEN-LAST:event_cmbGroupActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox cmbGroup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtKeterangan;
    // End of variables declaration//GEN-END:variables

    
    private void udfLoadMenuList(){
        try {
            if(conn ==null || cmbGroup.getSelectedIndex()==0)
                return;
            
            ((DefaultTableModel)jTable1.getModel()).setRowCount(0);
            ResultSet rs=conn.createStatement().executeQuery("select m.menu_description, gl.menu_id\n" +
                        "from m_menu_group_list gl\n" +
                        "inner join m_menu_list m on m.id=gl.menu_id \n" +
                        "where gl.group_id='"+cmbGroup.getSelectedItem().toString()+"'\n" +
                        "order by m.urut");
            while(rs.next()){
                ((DefaultTableModel)jTable1.getModel()).addRow(new Object[]{
                    rs.getString("menu_description"),
                    rs.getInt("menu_id")
                });
            }
            rs.close();
            if(jTable1.getRowCount() > 0){
                jTable1.setRowSelectionInterval(0, 0);
                jTable1.changeSelection(0, 0, false, false);
                fn.setAutoResizeColWidth(jTable1);
            }
        } catch (SQLException ex) {
            Logger.getLogger(FrmMenuGrouping.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    private void udfSave() {
        if(!cekSebelumSimpan())
            return;
        try {
            conn.setAutoCommit(false);
            String grup=cmbGroup.getSelectedItem().toString();
            int c=conn.createStatement().executeUpdate("Delete from m_menu_group_list where group_id='"+grup+"'");
            
            PreparedStatement ps=conn.prepareStatement("insert into m_menu_group_list(group_id, menu_id) values(?, ?)");
            for(int i=0; i<jTable1.getRowCount(); i++){
                ps.setString(1, grup);
                ps.setInt(2, Integer.valueOf(jTable1.getValueAt(i, 1).toString()));
                ps.addBatch();
            }
            ps.executeBatch();
            conn.setAutoCommit(true);
            JOptionPane.showMessageDialog(this, "Simpan grup menu sukses!");
        } catch (SQLException ex) {
            try {
                conn.rollback();
                Logger.getLogger(FrmMenuGrouping.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex1) {
                Logger.getLogger(FrmMenuGrouping.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }
    }

    private boolean addGroup(String newGroup) {
        try {
            ResultSet rs=conn.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE)
                    .executeQuery("select * from m_menu_group where group_id='"+newGroup+"'");
            if(rs.next()){
                JOptionPane.showMessageDialog(this, "Grup menu '"+newGroup+"' sudah ada!");
                rs.close();
                return false;
            }
            rs.moveToInsertRow();
            rs.updateString("group_id", newGroup);
            rs.updateString("module_name", "APOTEK");
            //rs.updateString("keterangan", newGroup);
            
            rs.insertRow();
            rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(FrmMenuGrouping.class.getName()).log(Level.SEVERE, null, ex);
        }
        return true;
    }

    private boolean cekSebelumSimpan() {
        if(cmbGroup.getSelectedIndex()==0){
            JOptionPane.showMessageDialog(this, "Silahkan pilih grup menu terlebih dulu");
            cmbGroup.requestFocusInWindow();
            return false;
        }
        if(jTable1.getRowCount()==0){
            JOptionPane.showMessageDialog(this, "Tidak ada daftar item yang akan dikelompokkan!!!");
            jTable1.requestFocusInWindow();
            return false;
        }
        
        return true;
    }
    
    
    class MyKeyListener extends KeyAdapter {
        @Override
        public void keyReleased(KeyEvent evt){

        }

        @Override
        public void keyTyped(KeyEvent evt){
            
        }

        @Override
        public void keyPressed(KeyEvent evt) {
            Component ct = KeyboardFocusManager.getCurrentKeyboardFocusManager().getPermanentFocusOwner();
            int keyKode = evt.getKeyCode();
            switch(keyKode){
                case KeyEvent.VK_F2:{
                    udfSave();
                    break;
                }
                case KeyEvent.VK_INSERT:{
                    DlgLookup d1=new DlgLookup(JOptionPane.getFrameForComponent(aThis), true);
                    String ids="";
                    for(int i=0; i< jTable1.getRowCount(); i++){
                        ids+=(ids.length()==0? "" : ",") +" "+jTable1.getValueAt(i, 1).toString()+" ";
                    }

                    String s="select * from (" +
                            "select menu_description as keterangan, id from m_menu_list   "+
                            (ids.length()>0? "where id not in("+ids+")":"")+" order by 2) x ";

                    d1.setTitle("Lookup Menu List");
                    d1.udfLoad(conn, s, "(keterangan)", null);

                    d1.setVisible(true);

                    //System.out.println("Kode yang dipilih" +d1.getKode());
                    if(d1.getKode().length()>0){
                        TableColumnModel col=d1.getTable().getColumnModel();
                        JTable tbl=d1.getTable();
                        int iRow = tbl.getSelectedRow();

                        ((DefaultTableModel)jTable1.getModel()).addRow(new Object[]{
                            tbl.getValueAt(iRow, col.getColumnIndex("keterangan")).toString(),
                            tbl.getValueAt(iRow, col.getColumnIndex("id")),
                        });

                        jTable1.setRowSelectionInterval(jTable1.getRowCount()-1, jTable1.getRowCount()-1);
                        jTable1.requestFocusInWindow();
                        jTable1.changeSelection(jTable1.getRowCount()-1, 
                                jTable1.getColumnModel().getColumnIndex("Keterangan Menu"), false, false);
                        
                        fn.setAutoResizeColWidth(jTable1);
                    }
                    break;
                }
                case KeyEvent.VK_ENTER : {
                    if(!(ct instanceof JTable)){
                        if(evt.getSource().equals(btnSave)){
                            udfSave();
                            return;
                        }
                        if (!fn.isListVisible()){
                            Component c = findNextFocus();
                            if (c==null) return;
                            if(c.isEnabled())
                                c.requestFocus();
                            else{
                                c = findNextFocus();
                                if (c!=null) c.requestFocus();;
                            }
                        }else{
                            fn.lstRequestFocus();
                        }
                    }
                    break;
                }
                case KeyEvent.VK_DOWN: {
                    if(ct instanceof JTable){
//                        if(((JTable)ct).getSelectedRow()==0){
////                            Component c = findNextFocus();
////                            if (c==null) return;
////                            if(c.isEnabled())
////                                c.requestFocus();
////                            else{
////                                c = findNextFocus();
////                                if (c!=null) c.requestFocus();;
////                            }
//                        }
                    }else{
                        if (!fn.isListVisible()){
                            Component c = findNextFocus();
                            if (c==null) return;
                            if(c.isEnabled())
                                c.requestFocus();
                            else{
                                c = findNextFocus();
                                if (c!=null) c.requestFocus();;
                            }
                        }else{
                            fn.lstRequestFocus();
                        }
                        break;
                    }
                }

                case KeyEvent.VK_UP: {
                    if(ct instanceof JTable){
                        if(((JTable)ct).getSelectedRow()==0){
                            Component c = findPrevFocus();
                            if (c==null) return;
                            if(c.isEnabled())
                                c.requestFocus();
                            else{
                                c = findPrevFocus();
                                if (c!=null) c.requestFocus();;
                            }
                        }
                    }
                    else{
                        Component c = findPrevFocus();
                        if (c==null) return;
                        if(c.isEnabled())
                            c.requestFocus();
                        else{
//                            c = findPreFocus();
//                            if (c!=null) c.requestFocus();;
                        }
                    }
                    break;
                }

                case KeyEvent.VK_DELETE:{
                    if(evt.getSource().equals(jTable1) && jTable1.getSelectedRow() >=0){
                        ((DefaultTableModel)jTable1.getModel()).removeRow(jTable1.getSelectedRow());
                    }
                    break;
                }
                case KeyEvent.VK_ESCAPE:{

                    break;
                }
            }
        }

//        @Override
//        public void keyReleased(KeyEvent evt){
//            if(evt.getSource().equals(txtDisc)||evt.getSource().equals(txtQty)||evt.getSource().equals(txtUnitPrice))
//                GeneralFunction.keyTyped(evt);
//        }


    }
    public Component findNextFocus() {
        // Find focus owner
        Component c = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();
        Container root = c == null ? null : c.getFocusCycleRootAncestor();

        if (root != null) {
            FocusTraversalPolicy policy = root.getFocusTraversalPolicy();
            Component nextFocus = policy.getComponentAfter(root, c);
            if (nextFocus == null) {
                nextFocus = policy.getDefaultComponent(root);
            }
            return nextFocus;
        }
        return null;
    }

    public Component findPrevFocus() {
        // Find focus owner
        Component c = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();
        Container root = c == null ? null : c.getFocusCycleRootAncestor();

        if (root != null) {
            FocusTraversalPolicy policy = root.getFocusTraversalPolicy();
            Component prevFocus = policy.getComponentBefore(root, c);
            if (prevFocus == null) {
                prevFocus = policy.getDefaultComponent(root);
            }
            return prevFocus;
        }
        return null;
    }
    
    private FocusListener txtFocusListener=new FocusListener() {
        public void focusGained(FocusEvent e) {
            if(e.getSource() instanceof JTextField || e.getSource() instanceof JFormattedTextField){
                ((JTextField)e.getSource()).setBackground(Color.YELLOW);
                if(e.getSource() instanceof JTextField){
                    ((JTextField)e.getSource()).setSelectionStart(0);
                    ((JTextField)e.getSource()).setSelectionEnd(((JTextField)e.getSource()).getText().length());
                }else if(e.getSource() instanceof JFormattedTextField){
                    ((JFormattedTextField)e.getSource()).setSelectionStart(0);
                    ((JFormattedTextField)e.getSource()).setSelectionEnd(((JFormattedTextField)e.getSource()).getText().length());
                }

            }
        }


        public void focusLost(FocusEvent e) {
            if(e.getSource().getClass().getSimpleName().equalsIgnoreCase("JTextField")||
                    e.getSource().getClass().getSimpleName().equalsIgnoreCase("JFormattedTextField")){
                ((JTextField)e.getSource()).setBackground(Color.WHITE);

                

           }
        }


    } ;

}
