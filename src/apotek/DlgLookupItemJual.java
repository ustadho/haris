/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DlgLookupItem2.java
 *
 * Created on 28 Des 10, 6:36:14
 */

package apotek;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import main.GeneralFunction;
import main.MainForm;

/**
 *
 * @author cak-ust
 */
public class DlgLookupItemJual extends javax.swing.JDialog {
    private Connection conn;
    GeneralFunction fn=new GeneralFunction();
    private String sCustType="R";
    private int columnIndex;
    private JTable srcTable;
    private KeyEvent keyEvent;
    private Object objForm;
    private String sKodeBarang="";

    /** Creates new form DlgLookupItem2 */
    public DlgLookupItemJual(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        tblItem.setRowHeight(22);
        tblItem.getTableHeader().setFont(tblItem.getFont());

        txtCari.addFocusListener(txtFocusListener);
        tblItem.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0),"selectNextColumnCell");
        tblItem.getColumn("Kode").setPreferredWidth(120);
        tblItem.getColumn("Nama Barang").setPreferredWidth(250);
        tblItem.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                if(tblItem.getSelectedRow()>=0){
                }
            }
        });
    }

    public void setCustType(String s){
        this.sCustType=s;
    }

    public void setObjForm(Object obj){
        objForm=obj;
    }

    private void setSelected(){
        int iRow=tblItem.getSelectedRow();
        if(iRow>=0)
            sKodeBarang=tblItem.getValueAt(iRow, 0).toString();
        if(objForm !=null)
            this.dispose();
    }

    public void setConn(Connection con){
        this.conn=con;
    }

    private void udfFilter(){
        try{
            setCursor(new Cursor(Cursor.WAIT_CURSOR));
            ((DefaultTableModel)tblItem.getModel()).setNumRows(0);
            String sQry="select i.item_code, coalesce(i.item_name,'') as item_name, coalesce(i.nama_paten,'') as nama_paten,"
                    + "coalesce(i.satuan_kecil,'') as satuan_kecil, "
                    + "COALESCE(i.stock,0) as stock, coalesce(i.indikasi,'') as indikasi, "
                    + "coalesce(g.group_name, '') as group_name, coalesce(i.harga_klinik,0) as harga_klinik, "
                    + "coalesce(i.harga_reseller,0) as harga_reseller " +
                    "from barang  i "
                    + "left join item_group g on g.group_id=i.group_id "
                    +"where not discontinued " +
                    "and item_code||coalesce(i.item_name,'')||coalesce(i.nama_paten,'')||coalesce(i.indikasi,'') ilike '%"+txtCari.getText()+"%' " +
                    "order by 2";
            ResultSet rs=conn.createStatement().executeQuery(sQry);
            while(rs.next()){
                ((DefaultTableModel)tblItem.getModel()).addRow(new Object[]{
                    rs.getString("item_code"),
                    rs.getString("nama_paten"),
                    rs.getString("item_name"),
                    rs.getString("indikasi"),
                    rs.getDouble("harga_klinik"),
                    rs.getDouble("harga_reseller"),
                    rs.getDouble("stock"),
                    rs.getString("group_name"),
                });
            }
            rs.close();
            if(tblItem.getRowCount()>0){
                fn.setAutoResizeColWidth(tblItem);
                tblItem.setRowSelectionInterval(0, 0);
                
            }
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }catch(SQLException se){
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            JOptionPane.showMessageDialog(this, se.getMessage());
        }

    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtCari = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblItem = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Lookup Item by Harga Jual");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Pencarian");
        jLabel1.setName("jLabel1"); // NOI18N

        txtCari.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtCari.setName("txtCari"); // NOI18N
        txtCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCariKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCariKeyReleased(evt);
            }
        });

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        tblItem.setAutoCreateRowSorter(true);
        tblItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Kode", "Nama Paten", "Nama Barang", "Indikasi", "Harga Klinik", "Harga Reseller", "Stok", "Groups"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblItem.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblItem.setName("tblItem"); // NOI18N
        tblItem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblItemKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tblItem);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(txtCari)
                .addGap(10, 10, 10))
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 815, Short.MAX_VALUE)
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );

        setSize(new java.awt.Dimension(855, 535));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtCariKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCariKeyReleased
        udfFilter();
    }//GEN-LAST:event_txtCariKeyReleased

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        udfInitForm();
    }//GEN-LAST:event_formWindowOpened

    public void udfInitForm(){
        sKodeBarang="";
        txtCari.setText("");
        udfFilter();
    }

    private void txtCariKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCariKeyPressed
        switch(evt.getKeyCode()){
            case KeyEvent.VK_DOWN:{
                tblItem.requestFocus();
                break;
            }
            case KeyEvent.VK_ENTER:{
                setSelected();
                break;
            }
            case KeyEvent.VK_ESCAPE:{
                this.sKodeBarang="";
                this.dispose();
            }
        }
    }//GEN-LAST:event_txtCariKeyPressed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void tblItemKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblItemKeyPressed
        switch(evt.getKeyCode()){
            case KeyEvent.VK_UP:{
                if(tblItem.getSelectedRow()==0)
                txtCari.requestFocus();
                break;
            }
            case KeyEvent.VK_ENTER:{
                setSelected();
                break;
            }
            case KeyEvent.VK_ESCAPE:{
                this.sKodeBarang="";
                this.dispose();
            }
        }
    }//GEN-LAST:event_tblItemKeyPressed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DlgLookupItemJual dialog = new DlgLookupItemJual(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblItem;
    private javax.swing.JTextField txtCari;
    // End of variables declaration//GEN-END:variables

    private FocusListener txtFocusListener=new FocusListener() {
        public void focusGained(FocusEvent e) {
            if(e.getSource() instanceof JTextField || e.getSource() instanceof JFormattedTextField){
                ((JTextField)e.getSource()).setBackground(Color.YELLOW);
                if((e.getSource() instanceof JTextField && ((JTextField)e.getSource()).getName()!=null && ((JTextField)e.getSource()).getName().equalsIgnoreCase("textEditor"))){
                    ((JTextField)e.getSource()).setSelectionStart(0);
                    ((JTextField)e.getSource()).setSelectionEnd(((JTextField)e.getSource()).getText().length());
                }
            }
        }


        public void focusLost(FocusEvent e) {
            if(e.getSource().getClass().getSimpleName().equalsIgnoreCase("JTextField")||
                    e.getSource().getClass().getSimpleName().equalsIgnoreCase("JFormattedTextField")){
                ((JTextField)e.getSource()).setBackground(Color.WHITE);


           }
        }


    } ;

    public void setKeyEvent(KeyEvent evt) {
        this.keyEvent=evt;
    }

    public void setSrcTable(JTable table, int columnIndex) {
        this.srcTable=table;
        this.columnIndex=columnIndex;
    }

    public String getKodeBarang() {
        return sKodeBarang;
    }

    public void clearText() {
        txtCari.setText("");
    }


}
